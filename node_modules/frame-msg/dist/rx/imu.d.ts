import { FrameMsg } from '../frame-msg';
import { AsyncQueue } from '../async-queue';
/**
 * Interface for raw IMU data.
 */
export interface IMURawData {
    compass: [number, number, number];
    accel: [number, number, number];
}
/**
 * Class for processed IMU data.
 */
export declare class IMUData {
    compass: [number, number, number];
    accel: [number, number, number];
    raw?: IMURawData;
    constructor(compass: [number, number, number], accel: [number, number, number], raw?: IMURawData);
    get pitch(): number;
    get roll(): number;
}
/**
 * Options for RxIMU constructor.
 */
export interface RxIMUOptions {
    imuFlag?: number;
    smoothingSamples?: number;
}
/**
 * RxIMU class handles IMU data processing.
 * It processes magnetometer and accelerometer data, providing smoothed values.
 */
export declare class RxIMU {
    private imuFlag;
    private smoothingSamples;
    queue: AsyncQueue<IMUData | null> | null;
    private compassBuffer;
    private accelBuffer;
    constructor(options?: RxIMUOptions);
    /**
     * Process incoming IMU data packets.
     * @param data Uint8Array containing IMU data with flag byte prefix.
     */
    handleData(data: Uint8Array): void;
    /**
     * Attach the IMU handler to the Frame data response.
     * @param frame The FrameMsg instance.
     * @returns A promise that resolves to an AsyncQueue that will receive IMUData objects.
     */
    attach(frame: FrameMsg): Promise<AsyncQueue<IMUData | null>>;
    /**
     * Detach the IMU handler from the Frame data response and clean up resources.
     * @param frame The FrameMsg instance.
     */
    detach(frame: FrameMsg): void;
}
