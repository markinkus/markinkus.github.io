import { FrameMsg } from '../frame-msg';
import { AsyncQueue } from '../async-queue';
/**
 * Interface for the detailed brightness metrics (matrix or spot).
 */
export interface BrightnessDetails {
    r: number;
    g: number;
    b: number;
    average: number;
}
/**
 * Interface for the overall brightness data structure.
 */
export interface BrightnessData {
    center_weighted_average: number;
    scene: number;
    matrix: BrightnessDetails;
    spot: BrightnessDetails;
}
/**
 * Interface for the structured auto exposure result data.
 */
export interface AutoExpResultData {
    error: number;
    shutter: number;
    analog_gain: number;
    red_gain: number;
    green_gain: number;
    blue_gain: number;
    brightness: BrightnessData;
}
/**
 * Options for RxAutoExpResult constructor.
 */
export interface RxAutoExpResultOptions {
    msgCode?: number;
}
/**
 * RxAutoExpResult class handles processing of auto exposure result data packets.
 */
export declare class RxAutoExpResult {
    private msgCode;
    queue: AsyncQueue<AutoExpResultData | null> | null;
    /**
     * Initialize receive handler for processing auto exposure result data.
     * @param options Configuration options for the handler.
     * Includes `msgCode` (default: 0x11)
     */
    constructor(options?: RxAutoExpResultOptions);
    /**
     * Process incoming auto exposure result data packets.
     * @param data Uint8Array containing auto exposure result data with a flag byte prefix,
     * followed by 16 little-endian floats (64 bytes).
     */
    handleData(data: Uint8Array): void;
    /**
     * Attach the receive handler to the Frame data response.
     * @param frame The FrameMsg instance.
     * @returns A promise that resolves to an AsyncQueue that will receive AutoExpResultData objects.
     */
    attach(frame: FrameMsg): Promise<AsyncQueue<AutoExpResultData | null>>;
    /**
     * Detach the receive handler from the Frame data response and clean up resources.
     * @param frame The FrameMsg instance.
     */
    detach(frame: FrameMsg): void;
}
