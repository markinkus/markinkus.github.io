import { FrameBle } from 'frame-ble';
/**
 * Enum representing the available standard Lua libraries that can be uploaded.
 */
export declare enum StdLua {
    DataMin = "stdDataMin",
    AudioMin = "stdAudioMin",
    CameraMin = "stdCameraMin",
    CodeMin = "stdCodeMin",
    IMUMin = "stdIMUMin",
    ImageSpriteBlockMin = "stdImageSpriteBlockMin",
    PlainTextMin = "stdPlainTextMin",
    SpriteMin = "stdSpriteMin",
    SpriteCoordsMin = "stdSpriteCoordsMin",
    TapMin = "stdTapMin",
    TextSpriteBlockMin = "stdTextSpriteBlockMin"
}
type FrameMsgDataHandler = (data: Uint8Array) => void;
/**
 * FrameMsg class handles communication with the Frame device.
 * It wraps the FrameBle class and provides higher-level methods for uploading standard Lua libraries
 * and Frame applications.
 * It also manages the registration and unregistration of data response handlers for different Rx message types.
 * Subscribers can register their own handlers for specific message codes.
 */
export declare class FrameMsg {
    ble: FrameBle;
    private dataResponseHandlers;
    constructor();
    /**
     * Connects to the Frame device and optionally runs the initialization sequence.
     * Note: Print and Disconnect handlers should be set directly on the FrameBle instance
     * (e.g., `frameMsg.ble.setPrintResponseHandler(...)`, `frameMsg.ble.setDisconnectHandler(...)`)
     * or via `frameMsg.attachPrintResponseHandler(...)` before or after calling connect.
     * @param initialize If true, runs the break/reset/break sequence after connecting. Defaults to true.
     * @param connectOptions Options including name and namePrefix for device filtering.
     * @returns The device ID or name if connection was successful.
     * @throws Any exceptions from the underlying FrameBle connection or initialization.
     */
    connect(initialize?: boolean, connectOptions?: {
        name?: string;
        namePrefix?: string;
    }): Promise<string | undefined>;
    disconnect(): Promise<void>;
    isConnected(): boolean;
    printShortText(text?: string): Promise<string | void>;
    uploadStdLuaLibs(libs: StdLua[]): Promise<void>;
    uploadFrameApp(fileContent: string, frameFileName?: string): Promise<void>;
    startFrameApp(frameAppName?: string, awaitPrint?: boolean): Promise<string | void>;
    stopFrameApp(reset?: boolean): Promise<void>;
    attachPrintResponseHandler(handler?: (data: string) => void | Promise<void>): void;
    detachPrintResponseHandler(): void;
    sendMessage(msgCode: number, payload: Uint8Array, showMe?: boolean): Promise<void>;
    /**
     * Registers a handler for a subscriber interested in specific message codes from Frame.
     * @param subscriber The subscriber object/identifier.
     * @param msgCodes Array of message codes the subscriber is interested in.
     * @param handler The function to call with the incoming data (Uint8Array).
     */
    registerDataResponseHandler(subscriber: any, msgCodes: number[], handler: FrameMsgDataHandler): void;
    unregisterDataResponseHandler(subscriber: any): void;
    /**
     * Internal method to handle incoming data responses from FrameBle (as Uint8Array)
     * and dispatch to appropriate FrameMsg subscribers.
     * @param data The incoming data response as a Uint8Array.
     */
    private _handleDataResponse;
    sendLua(str: string, options?: {
        showMe?: boolean;
        awaitPrint?: boolean;
        timeout?: number;
    }): Promise<string | void>;
    /**
     * Sends raw data to the device.
     * @param data The Uint8Array payload to send.
     * @param options Configuration options.
     * @returns A Promise that resolves with the Uint8Array data response if awaitData is true, or void.
     */
    sendData(data: Uint8Array, options?: {
        showMe?: boolean;
        awaitData?: boolean;
        timeout?: number;
    }): Promise<Uint8Array | void>;
    sendResetSignal(showMe?: boolean): Promise<void>;
    sendBreakSignal(showMe?: boolean): Promise<void>;
    getMaxPayload(isLua: boolean): number;
}
export {};
