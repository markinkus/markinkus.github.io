import { TxSprite } from './sprite';
/**
 * An image split into horizontal sprite strips.
 */
export declare class TxImageSpriteBlock {
    /**
     * Source sprite to split.
     */
    image: TxSprite;
    /**
     * Height of each sprite strip. If the TxSprite is compressed, the strip has a packed size limit of 4kB and this value is ignored.
     */
    spriteLineHeight: number;
    /**
     * Whether to render lines as they arrive.
     */
    progressiveRender: boolean;
    /**
     * Whether lines can be updated after initial render.
     */
    updatable: boolean;
    /**
     * List of sprite strips.
     */
    spriteLines: TxSprite[];
    /**
     * @param image Source sprite to split
     * @param spriteLineHeight Height of each sprite strip. Default is 16.
     * @param progressiveRender Whether to render lines as they arrive. Default is true.
     * @param updatable Whether lines can be updated after initial render. Default is true.
     */
    constructor(image: TxSprite, spriteLineHeight?: number, progressiveRender?: boolean, updatable?: boolean);
    /**
     * Splits the source image into horizontal strips.
     * This method needs careful implementation based on how pixelData is structured
     * and how BPP affects its layout if it's not 1 byte per pixel index.
     * The current TxSprite.pixelData is Uint8Array of palette indices.
     */
    private _splitIntoLines;
    /**
     * Packs the image block header into a binary format.
     * @returns Uint8Array Binary representation of the header
     * @throws Error if there are no sprite lines to pack (though _splitIntoLines should always create at least one if height > 0 and spriteLineHeight > 0)
     */
    pack(): Uint8Array;
}
