(function(f,d){typeof exports=="object"&&typeof module<"u"?d(exports):typeof define=="function"&&define.amd?define(["exports"],d):(f=typeof globalThis<"u"?globalThis:f||self,d(f["frame-ble"]={}))})(this,function(f){"use strict";var y=Object.defineProperty;var R=(f,d,m)=>d in f?y(f,d,{enumerable:!0,configurable:!0,writable:!0,value:m}):f[d]=m;var c=(f,d,m)=>R(f,typeof d!="symbol"?d+"":d,m);class d{constructor(){c(this,"device");c(this,"server");c(this,"txCharacteristic");c(this,"rxCharacteristic");c(this,"SERVICE_UUID","7a230001-5475-a6a4-654c-8431f6ad49c4");c(this,"TX_CHARACTERISTIC_UUID","7a230002-5475-a6a4-654c-8431f6ad49c4");c(this,"RX_CHARACTERISTIC_UUID","7a230003-5475-a6a4-654c-8431f6ad49c4");c(this,"maxPayload",60);c(this,"awaitingPrintResponse",!1);c(this,"awaitingDataResponse",!1);c(this,"printTimeoutId");c(this,"printResponsePromise");c(this,"printResolve");c(this,"dataResponsePromise");c(this,"dataResolve");c(this,"onDataResponse");c(this,"onPrintResponse");c(this,"onDisconnectHandler");c(this,"handleDisconnect",()=>{this.device=void 0,this.server=void 0,this.txCharacteristic=void 0,this.rxCharacteristic=void 0,this.onDisconnectHandler&&this.onDisconnectHandler()});c(this,"notificationHandler",e=>{const i=e.target.value;if(!(!i||i.buffer.byteLength===0))if(i.byteLength>0&&i.getUint8(0)===1){const s=new Uint8Array(i.buffer,i.byteOffset+1,i.byteLength-1);if(this.awaitingDataResponse&&this.dataResolve&&(this.awaitingDataResponse=!1,this.dataResolve(s)),this.onDataResponse){const o=this.onDataResponse(s);o instanceof Promise&&o.catch(console.error)}}else{const s=new TextDecoder().decode(i);if(this.awaitingPrintResponse&&this.printResolve&&(this.awaitingPrintResponse=!1,this.printResolve(s)),this.onPrintResponse){const o=this.onPrintResponse(s);o instanceof Promise&&o.catch(console.error)}}})}setDataResponseHandler(e){this.onDataResponse=e}setPrintResponseHandler(e){this.onPrintResponse=e}setDisconnectHandler(e){this.onDisconnectHandler=e}async _attemptConnection(){var e,a,i,s;if(!this.device||!this.device.gatt)throw new Error("Bluetooth device or GATT interface not available for connection attempt.");this.txCharacteristic=void 0,this.rxCharacteristic=void 0,this.server=void 0;try{console.log(`Attempting to connect to GATT server on device: ${this.device.name||this.device.id}...`),this.server=await this.device.gatt.connect(),console.log("GATT server connected."),console.log("Getting primary service...");const o=await this.server.getPrimaryService(this.SERVICE_UUID);console.log("Primary service obtained."),console.log("Getting TX characteristic..."),this.txCharacteristic=await o.getCharacteristic(this.TX_CHARACTERISTIC_UUID),console.log("TX characteristic obtained."),console.log("Getting RX characteristic..."),this.rxCharacteristic=await o.getCharacteristic(this.RX_CHARACTERISTIC_UUID),console.log("RX characteristic obtained."),console.log("Starting notifications on RX characteristic..."),await this.rxCharacteristic.startNotifications(),this.rxCharacteristic.addEventListener("characteristicvaluechanged",this.notificationHandler),console.log("Notifications started."),await this.sendBreakSignal(!1),console.log("Fetching MTU size (max_length) from device...");const t=await this.sendLua("print(frame.bluetooth.max_length())",{awaitPrint:!0});if(t==null)throw new Error("Failed to get MTU size from device: no response.");const n=parseInt(t);if(isNaN(n)||n<=0)throw new Error(`Invalid MTU size received: '${t}'`);this.maxPayload=n,console.log(`MTU size set to: ${this.maxPayload}`)}catch(o){if(console.error("Error during connection attempt:",o),this.rxCharacteristic){try{(a=(e=this.device)==null?void 0:e.gatt)!=null&&a.connected&&await this.rxCharacteristic.stopNotifications()}catch{}this.rxCharacteristic.removeEventListener("characteristicvaluechanged",this.notificationHandler),this.rxCharacteristic=void 0}throw this.txCharacteristic=void 0,(s=(i=this.device)==null?void 0:i.gatt)!=null&&s.connected&&this.device.gatt.disconnect(),this.server=void 0,o}}async connect(e={}){var h;const{name:a,namePrefix:i,numAttempts:s=5,retryDelayMs:o=1e3}=e;if(!navigator.bluetooth)throw new Error("Web Bluetooth API not available.");if(!this.device){const r={filters:[a?{services:[this.SERVICE_UUID],name:a}:i?{services:[this.SERVICE_UUID],namePrefix:i}:{services:[this.SERVICE_UUID]}],optionalServices:[this.SERVICE_UUID]};try{if(console.log("Requesting Bluetooth device from user..."),this.device=await navigator.bluetooth.requestDevice(r),!this.device)throw new Error("No device selected by the user.");console.log(`Device selected: ${this.device.name||this.device.id}`)}catch(g){throw console.error("Bluetooth device request failed:",g),this.device=void 0,g}}if(!this.device)throw new Error("Device not available after selection phase.");const t=this.device;t.removeEventListener("gattserverdisconnected",this.handleDisconnect),t.addEventListener("gattserverdisconnected",this.handleDisconnect);let n;for(let l=1;l<=s;l++){if(!this.device){console.warn(`Device (id: ${t.id}) was disconnected externally during connection attempts.`),n=n||new Error(`Device disconnected externally during connection attempt ${l}.`);break}try{return console.log(`Connection attempt ${l} of ${s} to device '${t.name||t.id}'...`),await this._attemptConnection(),console.log(`Successfully connected to ${t.name||t.id} on attempt ${l}.`),t.id||t.name||"Unknown Device"}catch(r){if(n=r,console.error(`Attempt ${l} to connect to '${t.name||t.id}' failed:`,r),r instanceof Error&&r.name==="NetworkError"&&(r.message.includes("Connection attempt failed.")||r.message.includes("GATT operation failed for unknown reason.")||r.message.includes("GATT Server is disconnected.")||r.message.includes("Bluetooth device is already connected."))&&l<s)console.log(`Retryable error encountered. Retrying in ${o/1e3}s...`),await new Promise(u=>setTimeout(u,o));else{console.log("Non-retryable error or max attempts reached. Aborting connection process.");break}}}throw console.error(`Failed to connect to device '${t.name||t.id}' after ${s} attempts or due to external disconnection.`),t.removeEventListener("gattserverdisconnected",this.handleDisconnect),(h=t.gatt)!=null&&h.connected&&t.gatt.disconnect(),this.server=void 0,this.txCharacteristic=void 0,this.rxCharacteristic=void 0,this.device=void 0,n||new Error(`Failed to connect to ${t.name||t.id} after ${s} attempts. No specific error recorded, or device disconnected externally.`)}async disconnect(){var e;this.device&&((e=this.device.gatt)!=null&&e.connected)?this.device.gatt.disconnect():this.handleDisconnect()}isConnected(){return!!(this.device&&this.device.gatt&&this.device.gatt.connected)}getMaxPayload(e){return e?this.maxPayload:this.maxPayload-1}async transmit(e,a=!1){if(!this.txCharacteristic)throw new Error("Not connected or TX characteristic not available.");if(e.byteLength>this.maxPayload)throw new Error(`Payload length: ${e.byteLength} exceeds maximum BLE packet size: ${this.maxPayload}`);a&&console.log("Transmitting (hex):",Array.from(e).map(i=>i.toString(16).padStart(2,"0")).join(" ")),await this.txCharacteristic.writeValueWithResponse(e)}async sendLua(e,a={}){const{showMe:i=!1,awaitPrint:s=!1,timeout:o=5e3}=a,t=new TextEncoder().encode(e);if(t.byteLength>this.getMaxPayload(!0))throw new Error(`Lua string payload (${t.byteLength} bytes) is too large for max Lua payload (${this.getMaxPayload(!0)} bytes).`);if(s&&(this.printTimeoutId&&clearTimeout(this.printTimeoutId),this.awaitingPrintResponse=!0,this.printResponsePromise=new Promise((n,h)=>{this.printResolve=n,this.printTimeoutId=setTimeout(()=>{this.awaitingPrintResponse&&(this.awaitingPrintResponse=!1,this.printResolve=void 0,h(new Error(`Device didn't respond with a print within ${o}ms.`)))},o)}).finally(()=>{this.printTimeoutId&&(clearTimeout(this.printTimeoutId),this.printTimeoutId=void 0)})),await this.transmit(t,i),s)return this.printResponsePromise}async sendData(e,a={}){const{showMe:i=!1,awaitData:s=!1,timeout:o=5e3}=a;if(!this.txCharacteristic)throw new Error("Not connected or TX characteristic not available.");if(e.byteLength>this.getMaxPayload(!1))throw new Error(`Data payload (${e.byteLength} bytes) is too large for max data payload (${this.getMaxPayload(!1)} bytes).`);const t=new Uint8Array([1]),n=new Uint8Array(t.length+e.byteLength);n.set(t,0),n.set(e,t.length);let h;if(s&&(this.awaitingDataResponse=!0,this.dataResponsePromise=new Promise((l,r)=>{this.dataResolve=l,h=setTimeout(()=>{this.awaitingDataResponse&&(this.awaitingDataResponse=!1,this.dataResolve=void 0,r(new Error(`Device didn't respond with data within ${o}ms.`)))},o)}).finally(()=>{h&&clearTimeout(h)})),await this.transmit(n,i),s)return this.dataResponsePromise}async sendResetSignal(e=!1){const a=new Uint8Array([4]);await this.transmit(a,e),await new Promise(i=>setTimeout(i,200))}async sendBreakSignal(e=!1){const a=new Uint8Array([3]);await this.transmit(a,e),await new Promise(i=>setTimeout(i,200))}async uploadFileFromString(e,a="main.lua"){let i=e.replace(/\r/g,"").replace(/\\/g,"\\\\").replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/'/g,"\\'").replace(/"/g,'\\"');const s=await this.sendLua(`f=frame.file.open('${a}','w');print(1)`,{awaitPrint:!0});if(s!=="1")throw new Error(`Failed to open file ${a} on device. Response: ${s}`);const t=this.getMaxPayload(!0)-20;if(t<=0)throw new Error("Max payload size too small for file upload operations.");let n=0;for(;n<i.length;){let h=Math.min(t,i.length-n),l=i.substring(n,n+h);for(;l.endsWith("\\");){let g=0;for(let u=l.length-1;u>=0&&l[u]==="\\";u--)g++;if(g%2!==0)if(h>1)h--,l=i.substring(n,n+h);else throw await this.sendLua("f:close();print(nil)",{awaitPrint:!0}),new Error("Cannot safely chunk content due to isolated escape character at chunk boundary.");else break}const r=await this.sendLua(`f:write("${l}");print(1)`,{awaitPrint:!0});if(r!=="1")throw await this.sendLua("f:close();print(nil)",{awaitPrint:!0}),new Error(`Failed to write chunk to ${a}. Response: ${r}`);n+=h}await this.sendLua("f:close();print(nil)",{awaitPrint:!0})}async uploadFile(e,a="main.lua"){await this.uploadFileFromString(e,a)}async sendMessage(e,a,i=!1){if(e<0||e>255)throw new Error(`Message code must be 0-255, got ${e}`);const t=a.byteLength;if(t>65535)throw new Error(`Payload size ${t} exceeds maximum 65535 bytes`);const n=this.getMaxPayload(!1),h=n-1-2,l=n-1;if(h<=0||l<=0)throw new Error("Max payload size too small for message sending protocol.");let r=0;const g=Math.min(h,t),u=new Uint8Array(3+g);for(u[0]=e,u[1]=t>>8,u[2]=t&255,u.set(a.subarray(0,g),3),await this.sendData(u,{showMe:i,awaitData:!0}),r+=g;r<t;){const p=t-r,w=Math.min(l,p),v=new Uint8Array(1+w);v[0]=e,v.set(a.subarray(r,r+w),1),await this.sendData(v,{showMe:i,awaitData:!0}),r+=w}}}f.FrameBle=d,Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});
