/**
 * Class for managing a connection to and transferring data to and from
 * the Brilliant Labs Frame device over Bluetooth LE using WebBluetooth
 */
export declare class FrameBle {
    private device?;
    private server?;
    private txCharacteristic?;
    private rxCharacteristic?;
    private readonly SERVICE_UUID;
    private readonly TX_CHARACTERISTIC_UUID;
    private readonly RX_CHARACTERISTIC_UUID;
    private maxPayload;
    private awaitingPrintResponse;
    private awaitingDataResponse;
    private printTimeoutId?;
    private printResponsePromise?;
    private printResolve?;
    private dataResponsePromise?;
    private dataResolve?;
    private onDataResponse?;
    private onPrintResponse?;
    private onDisconnectHandler?;
    constructor();
    /**
     * Sets or updates the handler for asynchronous data responses from the device.
     * @param handler The function to call when data (as Uint8Array) is received.
     * Pass undefined to remove the current handler.
     */
    setDataResponseHandler(handler: ((data: Uint8Array) => void | Promise<void>) | undefined): void;
    /**
     * Sets or updates the handler for asynchronous print (string) responses from the device.
     * @param handler The function to call when a print string is received.
     * Pass undefined to remove the current handler.
     */
    setPrintResponseHandler(handler: ((data: string) => void | Promise<void>) | undefined): void;
    /**
     * Sets or updates the handler for disconnection events.
     * @param handler The function to call when the device disconnects.
     * Pass undefined to remove the current handler.
     */
    setDisconnectHandler(handler: (() => void) | undefined): void;
    private handleDisconnect;
    private notificationHandler;
    /**
     * Attempts to establish a connection with the device and set up characteristics.
     * This method is intended to be called internally by `connect` and handles a single connection attempt.
     */
    private _attemptConnection;
    /**
    Connects to a Frame device. Prompts the user to select a device if one is not already known.
    Retries connection establishment on specific errors.
    */
    connect(options?: {
        name?: string;
        namePrefix?: string;
        numAttempts?: number;
        retryDelayMs?: number;
    }): Promise<string | undefined>;
    disconnect(): Promise<void>;
    isConnected(): boolean;
    getMaxPayload(isLua: boolean): number;
    private transmit;
    sendLua(str: string, options?: {
        showMe?: boolean;
        awaitPrint?: boolean;
        timeout?: number;
    }): Promise<string | void>;
    /**
     * Sends raw data to the device. The data is prefixed with 0x01.
     * @param data The raw application payload to send as Uint8Array.
     * @param options Configuration for sending data.
     * @returns A promise that resolves with the Uint8Array data response if awaitData is true, or void otherwise.
     */
    sendData(data: Uint8Array, // This is the application payload
    options?: {
        showMe?: boolean;
        awaitData?: boolean;
        timeout?: number;
    }): Promise<Uint8Array | void>;
    sendResetSignal(showMe?: boolean): Promise<void>;
    sendBreakSignal(showMe?: boolean): Promise<void>;
    uploadFileFromString(content: string, frameFilePath?: string): Promise<void>;
    uploadFile(fileContent: string, frameFilePath?: string): Promise<void>;
    sendMessage(msgCode: number, payload: Uint8Array, showMe?: boolean): Promise<void>;
}
